package com.stack;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Stack;

public class MinimumRemoveForBalanced {
   
	public static List<String> removeInvalidParentheses(String str) {
        if (str.length() == 0) {
            return null;
        }
        Map<character, character=""> brackets = new HashMap<>();
        brackets.put('(', ')');
        LinkedList<character> stack = new LinkedList<>();
        List<string> result = new ArrayList<>();
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            if (brackets.containsKey(c)) {
                stack.push(c);
            } else if (brackets.containsValue(c)) {
                if (stack.isEmpty() || c != brackets.get(stack.pop())) {
                    int j = i - 1;
                    char[] chars = str.toCharArray();
                    while (j > 0) {
                        if (brackets.containsValue(chars[j])) {
                            char temp = chars[j];
                            chars[j] = ' ';
                            String valid = new String(chars);
                            result.add(valid.replaceAll("\\s",""));
                            chars[j] = temp;
                        }
                        j--;
                    }
                }
            }
        }
        return result;
    }
    
    public static void main (String[] args)
    {
    	
    	String s = "(){{}}[";
    	
    	System.out.println(removeInvalidParentheses (s));
    	
    }
    
}
